name: Build and Deploy to ECS

on:
  workflow_call:
    inputs:
      BUILD_NAME:
        description: "Build Name"
        required: true

jobs:
  build-deploy:
    name: ${{ inputs.BUILD_NAME }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          chmod +x ./scripts/deploy.sh
          echo '
            ${{ secrets.GOOGLE_SVC_ACCOUNT }}
            ' > fcp-firebase.json

          more fcp-firebase.json
          DB_HOST=${{ secrets.DB_HOST }} \
          DB_USER=${{ secrets.DB_USER }} \
          DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          GOOGLE_PROJECT=${{ secrets.GOOGLE_PROJECT }} ./scripts/deploy.sh
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      
      
      - run: sed 's/PAT/${{ secrets.FC_GH_ACTIONS }}/g' .terraform/main.tf > .terraform/main-sed.tf
      - run: rm .terraform/main.tf
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        env:
          GITHUB_TOKEN: ${{ secrets.FC_GH_ACTIONS }}
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - id: init
        name: Terraform Init
        run: terraform -chdir=.terraform init
      - id: plan
        name: Terraform Plan
        run: TF_VAR_fc_preview_token=${{ secrets.TF_ORG_TOKEN }} TF_VAR_api_image=${{ steps.build-image.outputs.image }} terraform -chdir=.terraform plan
      - id: apply
        name: Terraform Apply
        run: TF_VAR_fc_preview_token=${{ secrets.TF_ORG_TOKEN }} TF_VAR_api_image=${{ steps.build-image.outputs.image }}  terraform -chdir=.terraform apply -auto-approve
